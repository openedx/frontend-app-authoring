// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditorContainer component render snapshot: initialized. enable save and pass to header 1`] = `
<div
  className="editor-container d-flex flex-column position-relative zindex-0"
  style={
    {
      "minHeight": "100%",
    }
  }
>
  <BaseModal
    bodyStyle={null}
    close={[MockFunction closeCancelConfirmModal]}
    confirmAction={
      <Button
        onClick={[Function]}
        variant="primary"
      >
        <FormattedMessage
          defaultMessage="OK"
          description="Label for OK button"
          id="authoring.editorContainer.okButton.label"
        />
      </Button>
    }
    footerAction={null}
    headerComponent={null}
    isFullscreenScroll={true}
    isOpen={false}
    size="md"
    title="Exit the editor?"
  >
    <FormattedMessage
      defaultMessage="Are you sure you want to exit the editor? Any unsaved changes will be lost."
      description="Description text for modal confirming cancellation"
      id="authoring.editorContainer.cancelConfirm.description"
    />
  </BaseModal>
  <ModalDialog.Header
    className="shadow-sm zindex-10"
  >
    <div
      className="d-flex flex-row justify-content-between"
    >
      <h2
        className="h3 col pl-0"
      >
        <injectIntl(ShimmedIntlComponent)
          isInitialized={true}
        />
      </h2>
      <IconButton
        alt="Exit the editor"
        iconAs="Icon"
        onClick={[MockFunction openCancelConfirmModal]}
        src={[MockFunction icons.Close]}
      />
    </div>
  </ModalDialog.Header>
  <ModalDialog.Body
    className="pb-0 mb-6"
  >
    <h1>
      My test content
    </h1>
  </ModalDialog.Body>
  <injectIntl(ShimmedIntlComponent)
    disableSave={false}
    onCancel={[MockFunction openCancelConfirmModal]}
    onSave={
      {
        "handleSaveClicked": {
          "dispatch": [MockFunction react-redux.dispatch],
          "getContent": [MockFunction props.getContent],
          "returnFunction": [MockFunction props.returnFunction],
          "validateEntry": [MockFunction props.validateEntry],
        },
      }
    }
  />
</div>
`;

exports[`EditorContainer component render snapshot: not initialized. disable save and pass to header 1`] = `
<div
  className="editor-container d-flex flex-column position-relative zindex-0"
  style={
    {
      "minHeight": "100%",
    }
  }
>
  <BaseModal
    bodyStyle={null}
    close={[MockFunction closeCancelConfirmModal]}
    confirmAction={
      <Button
        onClick={[Function]}
        variant="primary"
      >
        <FormattedMessage
          defaultMessage="OK"
          description="Label for OK button"
          id="authoring.editorContainer.okButton.label"
        />
      </Button>
    }
    footerAction={null}
    headerComponent={null}
    isFullscreenScroll={true}
    isOpen={false}
    size="md"
    title="Exit the editor?"
  >
    <FormattedMessage
      defaultMessage="Are you sure you want to exit the editor? Any unsaved changes will be lost."
      description="Description text for modal confirming cancellation"
      id="authoring.editorContainer.cancelConfirm.description"
    />
  </BaseModal>
  <ModalDialog.Header
    className="shadow-sm zindex-10"
  >
    <div
      className="d-flex flex-row justify-content-between"
    >
      <h2
        className="h3 col pl-0"
      >
        <injectIntl(ShimmedIntlComponent)
          isInitialized={false}
        />
      </h2>
      <IconButton
        alt="Exit the editor"
        iconAs="Icon"
        onClick={[MockFunction openCancelConfirmModal]}
        src={[MockFunction icons.Close]}
      />
    </div>
  </ModalDialog.Header>
  <ModalDialog.Body
    className="pb-0 mb-6"
  />
  <injectIntl(ShimmedIntlComponent)
    disableSave={true}
    onCancel={[MockFunction openCancelConfirmModal]}
    onSave={
      {
        "handleSaveClicked": {
          "dispatch": [MockFunction react-redux.dispatch],
          "getContent": [MockFunction props.getContent],
          "returnFunction": [MockFunction props.returnFunction],
          "validateEntry": [MockFunction props.validateEntry],
        },
      }
    }
  />
</div>
`;
