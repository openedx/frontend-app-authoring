// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextEditor snapshots block failed to load, Toast is shown 1`] = `
<EditorContainer
  getContent={
    {
      "getContent": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": false,
      },
    }
  }
  isDirty={
    {
      "isDirty": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": false,
      },
    }
  }
  onClose={[MockFunction props.onClose]}
  returnFunction={null}
>
  <div
    className="editor-body h-75 overflow-auto"
  >
    <Toast
      onClose={[MockFunction hooks.nullMethod]}
      show={true}
    >
      Error: Could Not Load Text Content
    </Toast>
    <TinyMceWidget
      disabled={false}
      editorContentHtml="eDiTablE Text"
      editorRef={
        {
          "current": {
            "value": "something",
          },
        }
      }
      editorType="text"
      enableImageUpload={true}
      height="100%"
      id={null}
      images={{}}
      initializeEditor={[MockFunction args.intializeEditor]}
      isLibrary={null}
      learningContextId="course+org+run"
      lmsEndpointUrl=""
      minHeight={500}
      onChange={[Function]}
      setEditorRef={[MockFunction hooks.prepareEditorRef.setEditorRef]}
      studioEndpointUrl=""
    />
  </div>
</EditorContainer>
`;

exports[`TextEditor snapshots loaded, raw editor 1`] = `
<EditorContainer
  getContent={
    {
      "getContent": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": true,
      },
    }
  }
  isDirty={
    {
      "isDirty": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": true,
      },
    }
  }
  onClose={[MockFunction props.onClose]}
  returnFunction={null}
>
  <div
    className="editor-body h-75 overflow-auto"
  >
    <Toast
      onClose={[MockFunction hooks.nullMethod]}
      show={false}
    >
      Error: Could Not Load Text Content
    </Toast>
    <RawEditor
      content={
        {
          "data": {
            "data": "eDiTablE Text",
          },
        }
      }
      editorRef={
        {
          "current": {
            "value": "something",
          },
        }
      }
      lang="html"
    />
  </div>
</EditorContainer>
`;

exports[`TextEditor snapshots not yet loaded, Spinner appears 1`] = `
<EditorContainer
  getContent={
    {
      "getContent": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": false,
      },
    }
  }
  isDirty={
    {
      "isDirty": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": false,
      },
    }
  }
  onClose={[MockFunction props.onClose]}
  returnFunction={null}
>
  <div
    className="editor-body h-75 overflow-auto"
  >
    <Toast
      onClose={[MockFunction hooks.nullMethod]}
      show={false}
    >
      Error: Could Not Load Text Content
    </Toast>
    <div
      className="text-center p-6"
    >
      <Spinner
        animation="border"
        className="m-3"
        screenreadertext="loading"
      />
    </div>
  </div>
</EditorContainer>
`;

exports[`TextEditor snapshots renders as expected with default behavior 1`] = `
<EditorContainer
  getContent={
    {
      "getContent": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": false,
      },
    }
  }
  isDirty={
    {
      "isDirty": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": false,
      },
    }
  }
  onClose={[MockFunction props.onClose]}
  returnFunction={null}
>
  <div
    className="editor-body h-75 overflow-auto"
  >
    <Toast
      onClose={[MockFunction hooks.nullMethod]}
      show={false}
    >
      Error: Could Not Load Text Content
    </Toast>
    <TinyMceWidget
      disabled={false}
      editorContentHtml="eDiTablE Text"
      editorRef={
        {
          "current": {
            "value": "something",
          },
        }
      }
      editorType="text"
      enableImageUpload={true}
      height="100%"
      id={null}
      images={{}}
      initializeEditor={[MockFunction args.intializeEditor]}
      isLibrary={null}
      learningContextId="course+org+run"
      lmsEndpointUrl=""
      minHeight={500}
      onChange={[Function]}
      setEditorRef={[MockFunction hooks.prepareEditorRef.setEditorRef]}
      studioEndpointUrl=""
    />
  </div>
</EditorContainer>
`;

exports[`TextEditor snapshots renders static images with relative paths 1`] = `
<EditorContainer
  getContent={
    {
      "getContent": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": false,
      },
    }
  }
  isDirty={
    {
      "isDirty": {
        "editorRef": {
          "current": {
            "value": "something",
          },
        },
        "showRawEditor": false,
      },
    }
  }
  onClose={[MockFunction props.onClose]}
  returnFunction={null}
>
  <div
    className="editor-body h-75 overflow-auto"
  >
    <Toast
      onClose={[MockFunction hooks.nullMethod]}
      show={false}
    >
      Error: Could Not Load Text Content
    </Toast>
    <TinyMceWidget
      disabled={false}
      editorContentHtml="eDiTablE Text with <img src="/asset+org+run+type@asset+block@img.jpg" />"
      editorRef={
        {
          "current": {
            "value": "something",
          },
        }
      }
      editorType="text"
      enableImageUpload={true}
      height="100%"
      id={null}
      images={{}}
      initializeEditor={[MockFunction args.intializeEditor]}
      isLibrary={null}
      learningContextId="course+org+run"
      lmsEndpointUrl=""
      minHeight={500}
      onChange={[Function]}
      setEditorRef={[MockFunction hooks.prepareEditorRef.setEditorRef]}
      studioEndpointUrl=""
    />
  </div>
</EditorContainer>
`;
